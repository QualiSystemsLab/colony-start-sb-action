name: 'Start Colony Sandbox'
description: 'Starts a sandbox in Colony and returns its ID'
author: 'Quali'
inputs:
  space:
    description: 'Colony space'
    required: true
  blueprint_name:
    description: 'Name of Blueprint'
    required: true
  sandbox_name:
    description: 'Colony Sandbox Name'
    required: false
  colony_token:
    description: 'Colony longterm token'
    required: true
  branch:
    required: false
  duration:
    required: false
    default: '120'
  timeout:
    required: false
    default: '0'
  artifacts:
    required: false
  inputs:
    required: false

outputs:
  sandbox_id:
    description: 'The ID of launched Colony Sandbox'
    value: ${{ steps.start-sandbox.outputs.sandbox-id }}
  sandbox_shortcuts:
    description: 'Json with applications links. Format {app1:link1,..,appN:linkN}'
  sandbox_details:
    description: 'Full sandbox definition in json format'

runs:
  using: "composite"
  steps:
    - id: extract_branch
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

    - id: start-sandbox
      run: |
        if [ -n "${{ inputs.sandbox_name }}" ]; then
          sb_name="${{ inputs.sandbox_name }}"
        else
          sb_name="${{ inputs.blueprint_name }}.${{ github.run_number }}"
        fi

        echo "Provided blueprint name: ${{ inputs.blueprint_name }}"
        echo "Sandbox name: ${sb_name}"

        #Run start command
        python3 ${{ github.action_path }}/start.py '${{ inputs.blueprint_name }}' '$sb_name' '${{ inputs.duration }}' \
          '${{ steps.extract_branch.outputs.branch }}' '${{ inputs.inputs }}' '${{ inputs.artifacts }}'
      env:
        COLONY_SPACE: ${{ inputs.space }}
        COLONY_TOKEN: ${{ inputs.colony_token }}
      shell: bash
          
    - id: wait-sandbox
      run: |
        sandbox=${{ steps.start-sandbox.outputs.sandbox-id }}
        timeout=${{ inputs.timeout }}

        echo "Sandbox ID to wait: ${{ steps.start-sandbox.outputs.sandbox-id }}"
        echo "Minutes to wait: ${{ inputs.timeout }}"

        if [ "$timeout" = "0" ]; then
          echo "No need to wait"
        else 
          #Run wait command
          python3 ${{ github.action_path }}/wait.py "$sandbox" "$timeout"
        fi
      shell: bash
