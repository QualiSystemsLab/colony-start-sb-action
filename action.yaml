name: 'Start Colony Sandbox'
description: 'Starts a sandbox in Colony and returns its ID'
author: 'Quali'
inputs:
  space:
    description: 'Colony space'
    required: true
  blueprint_name:
    description: 'Name of Blueprint'
    required: true
  sandbox_name:
    description: 'Provide a name for the Sandbox'
    required: false
  colony_token:
    description: 'Colony long term token'
    required: true
  colony_account:
    required: false
    description: 'Your Colony account name. The account name is equal to your subdomain in the Colony URL'
  branch:
    description: 'Run the Blueprint version from a remote Git branch'
    required: false
  duration:
    description: 'The Sandbox will automatically de-provision at the end of the provided duration (minutes)'
    required: false
    default: '120'
  timeout:
    description: 'Set the timeout in minutes to wait for the sandbox to become active'
    required: false
    default: '0'
  artifacts:
    required: false
    description: 'A comma-separated list of artifacts per application. Example: appName1=path1, appName2=path2'
  inputs:
    required: false
    description: 'A comma-separated list of key=value pairs. For example: key1=value1, key2=value2'

outputs:
  sandbox_id:
    description: 'The ID of launched Colony Sandbox'
    value: ${{ steps.start-sandbox.outputs.sandbox_id }}
  sandbox_shortcuts:
    description: 'Json with applications links. Format {app1:link1,..,appN:linkN}'
    value: ${{ steps.wait-sandbox.outputs.sandbox_shortcuts }}
  sandbox_details:
    description: 'Full sandbox definition in json format'
    value: ${{ steps.wait-sandbox.outputs.sandbox_details }}

runs:
  using: "composite"
  steps:
    - id: test-step
      name: Test Python print
      run: |
        import time
        
        print("Trying printing from python directly")
        time.sleep(10)
        print("Done")
      
    
#     - id: start-sandbox
#       run: |
#         if [ -n "${{ inputs.sandbox_name }}" ]; then
#           sb_name="${{ inputs.sandbox_name }}"
#         else
#           sb_name="${{ inputs.blueprint_name }}.${{ github.run_number }}"
#         fi

#         echo "Provided blueprint name: ${{ inputs.blueprint_name }}"
#         echo "Sandbox name: ${sb_name}"
#         echo "Space: ${{ inputs.space }}"

#         #Run start command
#         python3 ${{ github.action_path }}/start.py "${{ inputs.blueprint_name }}" "$sb_name" "${{ inputs.duration }}" \
#           "${{ inputs.branch }}" "${{ inputs.inputs }}" "${{ inputs.artifacts }}"
#       env:
#         COLONY_SPACE: ${{ inputs.space }}
#         COLONY_TOKEN: ${{ inputs.colony_token }}
#         COLONY_ACCOUNT: ${{ inputs.colony_account }}
#       shell: bash
          
#     - id: wait-sandbox
#       run: |
#         sandbox=${{ steps.start-sandbox.outputs.sandbox_id }}
#         timeout=${{ inputs.timeout }}

#         echo "Sandbox ID to wait: ${sandbox}"
#         echo "Minutes to wait: ${timeout}"

#         if [ "$timeout" = "0" ]; then
#           echo "No need to wait"
#         else 
#           #Run wait command
#           python3 ${{ github.action_path }}/wait.py "$sandbox" "$timeout"
#         fi
#       shell: bash
#       env:
#         COLONY_SPACE: ${{ inputs.space }}
#         COLONY_TOKEN: ${{ inputs.colony_token }}
